---
description: 
globs: 
alwaysApply: true
---
# Règles pour les modèles Prisma

Applies to: **/prisma/schema.prisma

## Conventions de modélisation

- Utilisez PascalCase pour les noms de modèles
- Utilisez camelCase pour les noms de champs
- Ajoutez des commentaires pour expliquer les relations complexes
- Utilisez des enums pour les valeurs prédéfinies
- Définissez clairement les relations entre modèles
- Utilisez des index pour optimiser les requêtes fréquentes

## Exemple de schéma pour un SaaS

```prisma
// Définition des modèles pour un SaaS multi-tenant

// Utilisateur du système
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  memberships   Membership[]

  @@index([email])
}

// Organisation (tenant)
model Organization {
  id            String    @id @default(cuid())
  name          String
  slug          String    @unique
  plan          Plan      @default(FREE)
  customDomain  String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  memberships   Membership[]
  projects      Project[]
  subscription  Subscription?

  @@index([slug])
  @@index([customDomain])
}

// Relation entre utilisateurs et organisations
model Membership {
  id              String    @id @default(cuid())
  role            Role      @default(MEMBER)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId  String

  @@unique([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
}

// Projet dans une organisation
model Project {
  id              String    @id @default(cuid())
  name            String
  description     String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId  String

  @@index([organizationId])
}

// Abonnement lié à une organisation
model Subscription {
  id              String    @id @default(cuid())
  stripeCustomerId String?   @unique
  stripeSubscriptionId String? @unique
  stripePriceId   String?
  stripeCurrentPeriodEnd DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId  String    @unique

  @@index([stripeCustomerId])
  @@index([stripeSubscriptionId])
}

// Modèles pour NextAuth
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Enums
enum Role {
  OWNER
  ADMIN
  MEMBER
}

enum Plan {
  FREE
  PRO
  ENTERPRISE
}